
plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'maven-publish'
    id 'de.undercouch.download' version '4.0.4'
    id 'org.beryx.runtime' version '1.8.0'
}


// Polypheny-FRAM Fork
version = "${rootProject.version_major}.${rootProject.version_minor}.${rootProject.version_patch}" + (rootProject.hasProperty('isRelease') ? '' : '-SNAPSHOT')


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


repositories {
    mavenCentral()
    jcenter()
    maven {
      url 'https://nexus.dmi.unibas.ch/repository/maven2/'
    }
}


dependencies {
    implementation 'ch.ethz.ganymed:ganymed-ssh2:262'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'com.googlecode.log4jdbc:log4jdbc:1.2'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.0'
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'commons-collections:commons-collections:3.2.1'
    implementation 'commons-configuration:commons-configuration:1.6'
    implementation 'commons-io:commons-io:2.2'
    implementation 'commons-jxpath:commons-jxpath:1.3'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'commons-logging:commons-logging:1.1.3'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'javax.jdo:jdo-api:3.0'
    implementation 'javax.persistence:persistence-api:1.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'log4j:log4j:1.2.17'
    implementation 'mysql:mysql-connector-java:5.1.47'
    implementation 'net.sf.opencsv:opencsv:2.3'
    implementation 'net.sourceforge.collections:collections-generic:4.01'
    implementation 'net.sourceforge.jtds:jtds:1.2.6'
    implementation 'org.apache.commons:commons-math3:3.0'
    implementation 'org.apache.httpcomponents:httpclient:4.3.6'
    implementation 'org.apache.httpcomponents:httpcore:4.3.3'
    implementation 'org.apache.httpcomponents:httpmime:4.3.6'
    implementation('org.apache.openjpa:openjpa-persistence-jdbc:1.0.4') {
        exclude group: 'hsqldb', module: 'hsqldb'
    }
    implementation 'org.eclipse.persistence:javax.persistence:2.0.5'
    implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.2'
    implementation 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    implementation 'org.hibernate:hibernate-annotations:3.5.6-Final'
    implementation 'org.hibernate:hibernate-core:3.6.8.Final'
    implementation 'org.hibernate:hibernate-entitymanager:3.6.10.Final'
    implementation 'org.hsqldb:hsqldb:2.5.0'
    implementation 'org.postgresql:postgresql:9.4.1209.jre6'
    implementation 'org.slf4j:slf4j-simple:1.7.5'
    implementation 'org.xerial:sqlite-jdbc:3.7.2'

    //implementation files('lib/tpch-dbgen.bin.jar', 'lib/tpch-dbgen.exe.jar')

    implementation 'org.polypheny:polypheny-jdbc-driver:1.3'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
            include "bin/**"
            include "META-INF/**"
            include "**/tpch-distributions.dss"
            include "**/*-ddl.sql"
            include "**/*-dialects.xml"
            include "**/*.xsd"
            include "**/histogram.*.gz"
            include "**/table.*.gz"
            include "log4j.properties"
        }
    }

    test {
        java {
            srcDirs = ['tests']
        }
        resources {
            srcDirs = ['tests']
            include "**/*-ddl.sql"
            include "**/*-dialects.xml"
            include "**/*.xsd"
        }
    }
}


tasks.withType(JavaCompile) {
    options.debug = "true"
    options.debugOptions.debugLevel = "source,lines,vars"
}


test {
    useJUnit()
    maxHeapSize = '2G'
    timeout = Duration.ofSeconds(600000)
    exclude "**/TestJPAB*"
    exclude "**/TestAuctionMarkLoader*"
}


application {
    mainClassName = 'com.oltpbenchmark.DBWorkload'
    applicationName = 'oltpbenchmark'
    applicationDefaultJvmArgs = ["-Dlog4j.configuration=config/log4j.properties"]
}


applicationDistribution.from("config") {
    into "config"
}


def distributionsDir = "${project.buildDir}/distributions"


//
// https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/
// jdk-11.${jdk11Minor}.${jdk11Update}+${jdk11Build}
def jdk11Minor = '0'
def jdk11Update = '6'
def jdk11Build = '10'

def adoptOpenJdk11FolderVersionString = "jdk-11.${jdk11Minor}.${jdk11Update}%2B${jdk11Build}"
def adoptOpenJdk11FileVersionString = "11.${jdk11Minor}.${jdk11Update}_${jdk11Build}"

def standaloneJdk11Linux64 = "${rootProject.name}-${version}-jdk11-linux64"
def standaloneJdk11Windows64 = "${rootProject.name}-${version}-jdk11-windows64"

task jdk11_downloadJdkLinux64tar(type: Download) {
    def jdkLinux = file("${buildDir}/jdks/jdk-11-linux64.tar.gz")
    outputs.file jdkLinux

    src "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/${adoptOpenJdk11FolderVersionString}/OpenJDK11U-jdk_x64_linux_hotspot_${adoptOpenJdk11FileVersionString}.tar.gz"
    dest jdkLinux
    overwrite false
}

task jdk11_downloadJdkLinux64(type: Zip, dependsOn: jdk11_downloadJdkLinux64tar) {
    def jdkLinux = file("${buildDir}/jdks/jdk-11-linux64.zip")
    outputs.file jdkLinux

    from tarTree(jdk11_downloadJdkLinux64tar.dest)
    archiveFile.set jdkLinux
}

task jdk11_downloadJdkWindows64(type: Download) {
    def jdkWindows = file("${buildDir}/jdks/jdk-11-windows64.zip")
    outputs.file jdkWindows

    src "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/${adoptOpenJdk11FolderVersionString}/OpenJDK11U-jdk_x64_windows_hotspot_${adoptOpenJdk11FileVersionString}.zip"
    dest jdkWindows
    overwrite false
}

task jdk11_unzipJdkLinux64(type: Copy, dependsOn: jdk11_downloadJdkLinux64) {
    def zipFile = file("${buildDir}/jdks/jdk-11-linux64.zip")
    def outputDir = file("${buildDir}/jdks/jdk-11-linux64")

    from zipTree(zipFile)
    into outputDir
}

task jdk11_unzipJdkWindows64(type: Copy, dependsOn: jdk11_downloadJdkWindows64) {
    def zipFile = file("${buildDir}/jdks/jdk-11-windows64.zip")
    def outputDir = file("${buildDir}/jdks/jdk-11-windows64")

    from zipTree(zipFile)
    into outputDir
}

startScripts {
    defaultJvmOpts += ['-Xms1g', /*'-XX:MaxRAMPercentage=75',*/ '-Djava.net.preferIPv4Stack=true',]

    // The default script content is generated and
    // with the doLast method we can still alter
    // the contents before the complete task ends.
    doLast {
        // https://mrhaki.blogspot.ch/2015/04/gradle-goodness-alter-start-scripts.html
        // Support closures to add an additional element to
        // CLASSPATH definition in the start script files.
        def configureClasspathVar = { findClasspath, pathSeparator, fileSeparator, appHome, line ->
            // Looking for the line that starts with either CLASSPATH=
            // or set CLASSPATH=, defined by the findClasspath closure argument.
            line = line.replaceAll(~/^${findClasspath}=.*$/) { original ->
                // Get original line and append it
                // with the configuration directory.
                // Use specified path separator, which is different
                // for Windows or Unix systems.
                original += "${pathSeparator}\"${appHome}${fileSeparator}config\""
            }
        }

        // Alter the start script for Unix systems.
        unixScript.text = unixScript.readLines()
                .collect(configureClasspathVar.curry('CLASSPATH', ':', '/', '$APP_HOME'))
                .join('\n')

        // Alter the start script for Windows systems.
        windowsScript.text = windowsScript.readLines()
                .collect(configureClasspathVar.curry('set CLASSPATH', ';', '/', '%APP_HOME:"=%'))
                .join('\r\n')
    }
}

// For JDK 11
runtime {
    imageDir = file(distributionsDir)
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    javaHome = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "${buildDir}/jdks/jdk-11-windows64/jdk-11.${jdk11Minor}.${jdk11Update}+${jdk11Build}" : "${buildDir}/jdks/jdk-11-linux64/jdk-11.${jdk11Minor}.${jdk11Update}+${jdk11Build}"

    modules = [
            'java.base',
            'java.datatransfer',
            'java.desktop',
            'java.instrument',
            'java.logging',
            'java.management',
            'java.naming',
            'java.security.jgss',
            'java.sql',
            'java.transaction.xa',
            'java.xml',
            'jdk.unsupported',
    ]

    targetPlatform("${standaloneJdk11Linux64.replaceFirst("${rootProject.name}-", '')}", "${buildDir}/jdks/jdk-11-linux64/jdk-11.${jdk11Minor}.${jdk11Update}+${jdk11Build}")
    targetPlatform("${standaloneJdk11Windows64.replaceFirst("${rootProject.name}-", '')}", "${buildDir}/jdks/jdk-11-windows64/jdk-11.${jdk11Minor}.${jdk11Update}+${jdk11Build}")
}
tasks.runtime.dependsOn jdk11_unzipJdkWindows64, jdk11_unzipJdkLinux64

task jdk11_zipLinux64Package(type: Zip, group: 'distribution', dependsOn: tasks.runtime) {
    from(distributionsDir) {
        include "${standaloneJdk11Linux64}/**"
    }
    archiveFile.set file("${distributionsDir}/${standaloneJdk11Linux64}.zip")
}

task jdk11_zipWindows64Package(type: Zip, group: 'distribution', dependsOn: tasks.runtime) {
    from(distributionsDir) {
        include "${standaloneJdk11Windows64}/**"
    }
    archiveFile.set file("${distributionsDir}/${standaloneJdk11Windows64}.zip")
}

task jdk11_zipAll(group: 'distribution') {
    dependsOn jdk11_zipLinux64Package, jdk11_zipWindows64Package
}

task zipAll(group: 'distribution') {
    dependsOn jdk11_zipAll
}


publishing {
    publications {
        maven(MavenPublication) {
            pom {
                scm {
                    url = 'https://github.com/nouda/oltpbench.git'
                }
                packaging = 'zip'
            }
        }
    }
}
task generatePom(group: 'publishing', dependsOn: 'generatePomFileForMavenPublication')


idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes/main")
        testOutputDir = file("${project.buildDir}/classes/test")
    }
}
